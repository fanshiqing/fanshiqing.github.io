<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[htop - interactive process viewer]]></title>
    <url>%2F2017%2F06%2F18%2Fhtop%2F</url>
    <content type="text"><![CDATA[htop命令简介htop是Linux系统下的一个交互式、实时进程监控应用程序，top的高级版。 优点： 可以横向或纵向滚动浏览进程列表，以便查看所有的进程和完整的命令行 支持鼠标操作 杀进程时不需要输入进程号(快捷键: F9) htop vs top It is similar to top, but allows you to scroll vertically and horizon- tally, so you can see all the processes running on the system, along with their full command lines, as well as viewing them as a process tree, selecting multiple processes and acting on them all at once.Tasks related to processes (killing, renicing) can be done without entering their PIDs. (摘自htop手册:) 安装For Mac OS: 1$ brew install htop For Ubuntu 14.04 LTS: 1$ sudo apt-get install htop 查看命令手册： 1$ man htop 启动htop： 1$ htop 将得到如下类似的一个实时进程监控窗口： 帮助：按F1进入使用帮助。 退出：按下q键退出htop面板。 监控面板介绍系统CPU使用率 图中上半部分中的数字1到8表示系统中CPU/Core的数量，而紧邻数字的右侧进度条则相应地表示了对应CPU/Core的实时负载。进度条中不同颜色具有不同的含义(以下为默认配置，具体操作时可以在F2-&gt;Setup-&gt;Colors列表中选择不同的主题)： CPU使用率栏: [低优先级进程/用户进程/内核进程 &ensp; &ensp; &ensp; &ensp; &ensp; &ensp; &ensp; &ensp; &ensp; &ensp; used%] 系统内存使用率 Memory使用率栏：[已使用/buffers/cache &ensp; &ensp; &ensp; &ensp; &ensp; &ensp; &ensp; &ensp; &ensp; &ensp; used/total] 系统平均负载 负载(Load)): 运行队列(run-queue)的长度：L = 等待进程的数目 + 运行进程的数目 平均负载(load average) 在一段时间内CPU正在处理以及等待CPU处理的进程数之和的统计信息，也就是CPU使用队列的长度的统计信息 “最大负载=核心数”法则 在多核处理中，负载不应该高于处理器核心的总数量。source 上图中Load average之后的3个数字显示的是系统在1分钟，5分钟，15分钟之内的平均负载值。(注： uptime命令可以直接查看load average) 进程详细实时信息列表 每一列依次表示： PID 进程ID USER 进程的所有者 PRI 进程优先级。数字越小，优先级越高。 NI 进程的nice值（负值表示高优先级，正值表示低优先级） VIRT 进程使用的虚拟内存 RES 进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA S 进程状态 R (Running) &ensp; &ensp; 可执行状态（运行/就绪) D (uninterruptedly sleeping) &ensp; &ensp; 不可中断的睡眠状态.通常是在等待IO，比如磁盘IO，网络IO，其他外设IO (该状态不接收外来的任何信号，因此无法用kill杀掉D状态的进程) S (sleeping) &ensp; &ensp; 可中断的睡眠状态(因为等待某某事件的发生(比如等待socket连接、等待信号量),而被挂起) T (traced) &ensp; &ensp; 暂停状态或跟踪状态 (例如在gdb中对被跟踪的进程下一个断点，进程在断点处停下来的时候就处于task_traced状态) Z (zombied) &ensp; &ensp; 退出状态，进程成为僵尸进程(已经结束了的进程，但是没有从进程表中删除) CPU% 进程的CPU时间片利用率 MEM% 进程的物理内存利用率 TIME+ 进程使用的处理器时间总计 Command 启动该进程的完整命令行 最后一行是F1~F10的功能菜单和对应的字母快捷键。 Read MoreUnderstanding the Load Average on Linux and Other Unix-like SystemsUnderstanding Linux CPU Load - when should you be worried?Understanding and using htop to monitor system resourcesLinux Performance Tools]]></content>
      <categories>
        <category>Linux性能分析工具</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Linux性能分析</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[算法基础]]></title>
    <url>%2F2017%2F06%2F15%2F%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[function doDecrypt(pwd, onError) { console.log("in doDecrypt"); var txt = document.getElementById("enc_content").innerHTML; var plantext; try { var bytes = CryptoJS.AES.decrypt(txt, pwd); plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) {onError(err);} return; } document.getElementById("enc_content").innerHTML = plaintext; document.getElementById("enc_content").style.display = "block"; document.getElementById("enc_passwd").style.display = "none"; } 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 var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【闲情】记 第二届南大上海校友会新年羽毛球嘉年华]]></title>
    <url>%2F2017%2F01%2F07%2F%E9%97%B2%E6%83%85-%E8%AE%B0%E7%AC%AC%E4%BA%8C%E5%B1%8A%E5%8D%97%E5%A4%A7%E4%B8%8A%E6%B5%B7%E6%A0%A1%E5%8F%8B%E4%BC%9A%E6%96%B0%E5%B9%B4%E7%BE%BD%E6%AF%9B%E7%90%83%E5%98%89%E5%B9%B4%E5%8D%8E%2F</url>
    <content type="text"><![CDATA[Abstract 时间： 2017年1月7日 地点：上海财大（武川路校区）羽毛球馆（旧馆） 事件：第二届南大上海校友会新年羽毛球嘉年华活动 角色：第二次参加这个活动，本次担任 杨浦队 队长 ^_^ 赛制：趣味赛 + 团体赛 赛果：杨浦队在8支参赛队中勇夺 第4名 (历史最好成绩)！ 趣味赛: 单手颠球，穿越障碍 三人隔网，你发我接（限时） 团体赛(8支) 徐汇、闵松、沿江、张江、花木、杨浦、长静黄联队、市北联队 赛后聚餐地点：上海财大豪生酒店 赛前宣传海报(感谢@陈雨致 学姐的精心设计)： 赛前集体合影(每队一列，列首为该队队长): 高质量的比赛场馆(感谢@王绍立学长大力帮助联系和提供场地！): 比赛中： 赛果: 冠军：闵松队(根据约定，本次比赛冠军将负责主办明年的第三届比赛^_-) 亚军：沿江队 季军：张江队 殿军：杨浦队 赛后各队队长、裁判、志愿者们合影: 大杨浦队赛后合影留念 赛后聚餐: 广告时间感谢炜觉资本对本次活动的大力赞助！ 明年再来，闵松主办！]]></content>
      <categories>
        <category>闲情</category>
      </categories>
      <tags>
        <tag>闲情</tag>
        <tag>羽毛球</tag>
        <tag>相册</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CaffeNet vs CaffeOnSpark]]></title>
    <url>%2F2016%2F05%2F12%2FCaffeNet-vs-CaffeOnSpark%2F</url>
    <content type="text"><![CDATA[SparkNetSparkNet 是由amplab开发的基于Spark的分布式深度神经网络架构，2015年11月份在github上开源. 该系统开发的动机在于当下流行的批处理计算框架（MapReduce、Spark等）都不是设计用来支持已有的分布式深度学习系统下的异步的、通行密集型的任务。SparkNet将已有的数据处理框架（Spark)和流行的、高效的深度学习框架Caffe整合到一起，同时提供了Spark RDDs和Caffe的访问接口；并通过改进的并行化SGD算法来降低节点间的通信开销[1]. SparkNet的架构示例如图1所示[1]。 图1是由5个节点组成的EC2集群。其中Master节点负责向其余4各worker节点分发任务；每个worker在本地单独使用基于GPU的caffe来进行训练；本地训练结束后各个worker将参数回传给Master;Master收集各个worker的参数后做全局的处理（例如average）再broadcast给各个worker以进行下一轮的迭代。 CaffeOnSparkCaffeOnSpark 由Yahoo开发，并于今年2月份开源在github上。该系统旨在将深度学习步骤(训练、测试等)无缝地嵌入到Spark应用中，使得直接在存储数据的(强化的)Hadoop集群上进行深度学习成为可能，从而避免了数据在Hadoop集群和深度学习集群之间不必要的传输. 作为Spark的深度学习包，CaffeOnSpark填补了Spark MLlib在DL能力上的不足[3]。可以这样说，CaffeOnSpark集合了Caffe和Spark两者之长，并应用到大规模深度学习上，使得我们能像操作其他Spark应用一样操作深度学习任务。 CaffeOnSpark的系统架构图如图2[6] 所示： &ensp;&ensp; &ensp; &ensp; &ensp; &ensp; &ensp;&ensp; &ensp; &ensp; &ensp; &ensp; &ensp;图2. CaffeOnSpark System Architecture 从图2中我们看到CaffeOnSpark在参数的同步/管理操作上和SparkNet是完全不同的：CaffeOnSpark executors之间通过MPI_ALLREDUCE接口通信（通过底层RDMA/Infiniband 或者TCP/Ethenet来保证GPU间高速的数据传输,10x于CPU).在这种通信模式下，各个节点/Caffe引擎之间是peer-to-peer的模式；而SparkNet的设计中依然保留了Spark的主/从模式。 小结CaffeOnSpark和SparkNet的相同之处在于两者都使得Spark集群下基于Caffe的深度学习成为可能。 而两者最显著的不同在于两者在系统框架设计中对于参数同步所采用的不同方案。 参考资料[1]. Moritz,Philipp, et al. “SparkNet: Training Deep Networks in Spark.” arXiv preprint arXiv:1511.06051 (2015).[2]. Large Scale Distributed Deep Learning on Hadoop Clusters, PPT[3]. GitHub - amplab/SparkNet, https://github.com/amplab/SparkNet[4]. GitHub - yahoo/CaffeOnSpark, https://github.com/yahoo/CaffeOnSpark[5]. CaffeOnSpark Google Group, https://groups.google.com/forum/#!forum/sparknet-users[6]. Large Scale Distributed Deep Learning on Hadoop Clusters]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>深度学习框架</tag>
      </tags>
  </entry>
</search>