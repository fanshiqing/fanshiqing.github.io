<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[L04-Mutual Exclusion]]></title>
    <url>%2F2017%2F10%2F19%2FL04-Mutual-Exclusion%2F</url>
    <content type="text"><![CDATA[我是摘要]]></content>
      <categories>
        <category>Introduction to Distributed Algorithms</category>
      </categories>
      <tags>
        <tag>分布式算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[L03-Leader Election in Rings]]></title>
    <url>%2F2017%2F10%2F12%2FL03-Leader-Election-in-Rings%2F</url>
    <content type="text"><![CDATA[Discuss the leader election (LE) problem in message-passing systems for a ring topology, in which a group of processors must choose one among them to be a leader. Present the different algorithms for leader election problem by taking the cases like anonymous/non-anonymous rings, uniform/non-uniform rings and synchronous/asynchronous rings etc. [Based on the book “Distributed Computing“ by Hagit attiya &amp; Jennifer Welch] Ring Networks In an oriented ring, processors have a consistent notion of left and right. For example, if messages are always forwarded on channel 1, they will cycle clockwise around the ring. Why study rings? simple starting point, easy to analyze abstraction of a token ring lower bounds and impossibility results for ring topology also apply to arbitrary topoligies. The Leader Election (LE) Problem LE problem is for each processor to decide that either it is the leader or non-leader, subject to the constraint that exactly one processor decides to be the leader. LE problem represents a general class of symmetry-breaking problems. For example, when a deadlock is created, because of processors waiting in a cycle for each other, the deadlock can be broken by electing one of the processor as a leader and removing it from the cycle. Each processor has a set of elected (won) and not-elected (lost) states. Once an elected state is entered, processor is always in an elected state (and similarly for not-elected): i.e., irreversible decision. In every admissible execution: every processor eventually enters an elected or a not-elected state exectly one processor (the leader) enters an elected state. Uses of LE A leader can be used to coordinate activities of the system: find a spanning tree using the leader as the root; reconstruct a lost token in a token-ring network. Uniform (Anonymous) Algorithms Anonymous or not: A leader election algorithm is anonymous if processors do not have unique identifiers that can be used by the algorithm Message recipients can only be specified in terms of channel labels, e.g., left and right neighbors ==&gt; Every processor in the system has the same state machine. A uniform algorithm does not use the ring size (same algorithm for each size ring) Formally, every processor in every size ring is modeled with the same state machine Uniform: since the algorithm looks the same for every value of n. A non-uniform algorithm uses the ring size (different algorithm for each size ring) Formally, for each value of n, every processor in a ring of size n is modeled with the same state machine An . Leader Election in Anonymous RingsTheorem: For nonuniform algorithms and synchronous rings, there are no anonymous LE algorithms. Proof Sketch: Every processor begins in same state with same outgoing msgs (since anonymous) Every processor receives same msgs, does same state transition, and sends same msgs in round 1 Ditto for rounds 2,3,… Eventually some processor is supposed to enter an elected state. But then they all would. Proof sketch shows that either safety (never elect more than one leader) or liveness (eventually elect at least one leader) is violated. Since the theorem was proved for non-uniform and synchronous rings, the same result holds for weaker (less well-behaved) models (uniform / asynchronous). Lattice) (格）A lattice is an abstract structure studied in the mathematical subdisciplines of order theory and abstract algebra. It consists of a partially ordered set in which every two elements have a unique supremum (上确界) (also called a least upper bound or join, a ∧ b) and a unique infimum （下确界）(also called a greatest lower bound or meet, a V b) Based on the impossibility result, we can reasonably assume that: Rings with unique processor identifiers. LE in Asynchronous RingsThere exists algorithms when nodes have unique ids. We will evaluate them according to their message complexity. Brute Force LE123456789Send value of own id to the left.When receive an id j (from the right) if j &gt; id then forward j to the left // this processor has lost if j == id then elect self // this processor has won if j &lt; id then // do nothing (swallow) Analysis Correctness: Elect processor with the largest id. (Time: O(n)) Message complexity: Depends on how the ids are arranged. largest id travels all around the ring (n msgs) 2nd largest id travels until reaching largest 3rd largest id travels until reaching largest or second largest. etc. Worst way to arrange the ids is in decreasing order (Fig.3.2) The O(n^2) algorithm is simple and works in both sync and async model. But how to optimize? Idea: try to have message containing smaller ids travel smaller distance in the ring. k-neighbour Forwarding Basic idea Gradually increase the scope of sending Eliminate unnecessary senders accordingly Smaller IDs are swallowed Clever forwarding k-neighbourhood 2k+1 nodes: k left + k right + self in the kth phase, LE among the 2^k-neighborhood size of neighbourhood doubles in each phase only the winner survives to the next phase Analysis Correctness: similar to O(n*2) algorithm Message complexity Each msg belongs to a particular phase and is initiated by a particular proc. Probe distance in phase k is 2^k Number of msgs initiated by a proc. in phase k is at most 4 * 2^k (probes and replies in both directions) How many proc. initiate probes in phase k ? For k = 0, every proc. does For k &gt; 0, every proc. that is a “winner” in previous phase (phase k-1) does Maximum number of phase k-1 winners occurs when the are packed as densely as possible: Total number of phase k-1 winners is at most n/(2^(k-1) + 1) How many phases are there? let n/2^(k-1) + 1 == 1 (at the last phase there exists only one winner) ==&gt; k = log(n-1) + 1 = number of phases So the total number of msgs is sum, over all phases, of number of winners at that phase times number of msgs originated by that winner: The O(log n) algorithm is more complicated than the O(n^2) algorithm but uses fewer messages in worst case. Lower bound for LE AlgorithmCan we do better than O(nlogn) ? Theorem: Any leader election algorithm for asynchronous rings whose size is not known a priori has Ω(nlog n) msg complexity (holds also for undirectional rings). The two algorithms above are comparison-based algorithms, i.e. they use the identifiers only for comparison (&lt;, &gt;, =) In synchronous networks, O(n) msg complexity can be achieved if general arithmatic operations are permitted (non-comparison based) and if time complexity is unbounded. References[1] Attiya, Hagit, and Jennifer Welch. Distributed computing: fundamentals, simulations, and advanced topics. Vol. 19. John Wiley &amp; Sons, 2004.[2] 分布式算法（黄宇）课程主页[3] Distributed System]]></content>
      <categories>
        <category>Introduction to Distributed Algorithms</category>
      </categories>
      <tags>
        <tag>分布式算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[L02-Basic Message Passing Algorithms]]></title>
    <url>%2F2017%2F10%2F05%2FL02-Basic-Message-Passing-Algorithms%2F</url>
    <content type="text"><![CDATA[Broadcast / convergecast on a spanning tree Async / sync flooding to construct a spanning tree distributed DFS with/without a specific root Broadcast over a rooted spanning tree Broadcast is used to send the information to all. Suppose processors already have information about a rooted spanning tree of the communication topology tree: connected graph with no cycles spanning tree: contains all processors rooted: there is a unique root node Implemented via parent and children local varialbes at each processor. indicate which incident channnels lead to parent and children in the rooted spanning tree. Spanning Tree: A tree is a connected undirected graph with no cycles. It is a spanning tree of a graph G if it spans G (that is, it includes every vertex of G) and is a subgraph of G (every edge in the tree belongs to G). A spanning tree of a connected graph G can also be defined as a maximal set of edges of G that contains no cycle, or as a minimal set of edges that connect all vertices. Complexity analysis: Synchronous model Time complexity: time is depth d of the spanning tree. (at most n-1 when chain) MSG complexity: number of messages is n-1, since one message is sent over each spanning tree edges. Aysnchronous model Same as synchronous model. Convergecast (from leaves to the root) Convergecast is used to collect the information. Again, suppose a rooted spanning tree has already been computed by the processors parent and children variables at each processor Do the opposite of broadcast leaves send msgs to their parents. non-leaves wait to get msgs from each child, then send combined (aggregate) info to parent. Finding a Spanning Tree Given a Root by Flooding Flooding): Flooding is a simple computer network routing algorithm in which every incoming packet is sent through every outgoing link except the one it arrived on. root send M to all its neighbours when non-root first gets M, set the sender as its parent send “parent” msg to sender send M to all other neighbours (if no other neighours, then terminate) when get M otherwise, send “reject” to sender. use “parent” and “reject” msgs to set children varialbes and know when to terminate (after hearing from all neighbours) Execution of spanning tree algorithm In the synchronous model: always gives breadth-first search (BFS) tree. Asynchronous: not necessarily BFS tree. Both models achieves O(m) messages complexity and O(diam) time complexity. Diameter D of a network is defined as the longest path of the shortest paths between any two nodes. Distributed DFS with a Specified Root Basic rationale: sequential execution over a distributed system (of multiple processors) Distributed DFS without a Specified Root Assume the processors have unique identifiers (otherwise impossible!) Idea: Each processor starts running a copy of the DFS spanning tree algorithm, with itself as root tag each msg with initiator’s id to differentiate when copies “collide”, copy with larger id wins. Message complexity: O(n*m) Time complexity: O(m) (m: edges in graph) References[1] Attiya, Hagit, and Jennifer Welch. Distributed computing: fundamentals, simulations, and advanced topics. Vol. 19. John Wiley &amp; Sons, 2004.[2] 分布式算法（黄宇）课程主页[3] Distributed System]]></content>
      <categories>
        <category>Introduction to Distributed Algorithms</category>
      </categories>
      <tags>
        <tag>分布式算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[L01-Model of Computation]]></title>
    <url>%2F2017%2F09%2F27%2FL01-Model-of-Computation%2F</url>
    <content type="text"><![CDATA[Async/sync system Random access machine model Message passing model Shared memory model Essential Issues of Alogrithm Model of computation Algorithm design Algorithm analysis Asynchronous &amp; Synchronous System Asynchronous System. A system is said to be asynchronous if there is no fixed upper bound on how long it takes for a message to be delivered (message delays) or how much time elapses between consectutive steps of a processor (processor step time) [1]. Synchronous System. In the synchronous model processors execute in lockstep: The execution is partitioned into rounds, and in each round, every processor can send a message to each neighbour, the messages are delivered, and every processor computes based on the messages just received. (This model is convenient for designing algorithms) [1] Why asynchronous systems? Sometimes the upper bounds are quite large, are infrequently reached and change over time. It is often desiable to design an algorithm that is independent of any particular timing parameters, namely an asynchronous algorithm Instead of design an algorithms that depends on the bounds Random Access Machine (RAM) ModelThe goal of working with a model computer instead of a real computer is that we want to have a machine, which is as easy as possible, but still let us capture the main aspects of a real computer. This model of computation is an abstraction that allows us to compare algorithms on the basis of performance. Simplifications for RAM model: Simple operations take only 1 time step; Loops and subroutines are not simple operations; We assume we have as much memory as we need (infinite storage); Memory access is considered to be free in terms of time (or one time step?); A unit of memory cannot hold an arbitrarily large number. The RAM model takes no notice of whether an item is in cache or on the disk, which simplifies the analysis. It is an excellent model for understanding how an algorithm will perform on a real computer. It strikes a fine balance by capturing the essential behavior of computers while being simple to work with. We use the RAM model because it is useful in practice. Relationship between the Turing Machine and RAM ModelsA random-access machine with unbounded indirection is equivalent to a Turing machine. Informally speaking, both machines have the same computational capabilities. (wikipedia | Equivalance of RAM and Turing Machines) Message Passing ModelThe architecture is used to communicate data among a set of processors without the need for a global memory. Each processor has its own local memory and communicates with other Processors using message. Data exchanged among processors cannot be shared; it is rather copied (using send/receive messages). An important advantage of this form of data exchange is the elimination of the need for synchronization constructs, such as semaphores, which results in performance improvement. Shared Memory ModelBoth SMP and DSM are shared address space platforms. Symmetric Multiprocessors (SMP)Processors all connected to a large shared memory. Examples are processors connected by crossbar, or multicore chips. It is symmetric because the access time from any of the CPUs to memory is the same. Key characteristics is uniform memory acess (UMA).Caches are a problem: need to be kept coherrent = when one CPU changes a value in memory, then all other CPUs will get the same value when they access it. All caches will show a coherent value. Distributed Shared Memory (DSM)DSM is basically an abstraction that integrates the local memory of different machine into a single logical entity shared by cooperating processes. The distributed shared memory implements the shared memory model in distributed systems, which have no physical shared memory. (shared memory exists only virtually, similar concepts to virtual memory) The shared memory model provides a virtual address space shared between all nodes The overcome the high cost of communication in distributed systems, DSM systems move data to the location of access. How? Data moves between main memory and secondary memory (within a node) and between main memories of different nodes. Each data object is owned by a node Initial owner is the node that created object Ownership can change as object moves from node to node When a process accesses data in the shared address space, the mapping manager maps shared memory address to physical memory (local or remote). Shared Memory v.s. Message Passing Messsge Passing Shared Memory who does communication Programmer Automatic Data distribution Manual Automatic HW support Simple Extensive (automatically figures out when to send data, to whom and where to cache in, etc.) Programming Correctness Difficult Less Difficult Performance Difficult (noce you get correctness, performance is not far away) Very Difficult References[1] Attiya, Hagit, and Jennifer Welch. Distributed computing: fundamentals, simulations, and advanced topics. Vol. 19. John Wiley &amp; Sons, 2004.[2] 分布式系统(Distributed System)资料[3] Shared Memory, NYU Computer Science[4] 分布式算法（黄宇）课程主页[5] Message Passing Vs Shared Memory - Georgia Tech - HPCA: Part 5]]></content>
      <categories>
        <category>Introduction to Distributed Algorithms</category>
      </categories>
      <tags>
        <tag>分布式算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[htop - interactive process viewer]]></title>
    <url>%2F2017%2F06%2F18%2Fhtop%2F</url>
    <content type="text"><![CDATA[htop命令简介htop是Linux系统下的一个交互式、实时进程监控应用程序，top的高级版。 优点： 可以横向或纵向滚动浏览进程列表，以便查看所有的进程和完整的命令行 支持鼠标操作 杀进程时不需要输入进程号(快捷键: F9) htop vs top It is similar to top, but allows you to scroll vertically and horizon- tally, so you can see all the processes running on the system, along with their full command lines, as well as viewing them as a process tree, selecting multiple processes and acting on them all at once.Tasks related to processes (killing, renicing) can be done without entering their PIDs. (摘自htop手册:) 安装For Mac OS: 1$ brew install htop For Ubuntu 14.04 LTS: 1$ sudo apt-get install htop 查看命令手册： 1$ man htop 启动htop： 1$ htop 将得到如下类似的一个实时进程监控窗口： 帮助：按F1进入使用帮助。 退出：按下q键退出htop面板。 监控面板介绍系统CPU使用率 图中上半部分中的数字1到8表示系统中CPU/Core的数量，而紧邻数字的右侧进度条则相应地表示了对应CPU/Core的实时负载。进度条中不同颜色具有不同的含义(以下为默认配置，具体操作时可以在F2-&gt;Setup-&gt;Colors列表中选择不同的主题)： CPU使用率栏: [低优先级进程/用户进程/内核进程 &ensp; &ensp; &ensp; &ensp; &ensp; &ensp; &ensp; &ensp; &ensp; &ensp; used%] 系统内存使用率 Memory使用率栏：[已使用/buffers/cache &ensp; &ensp; &ensp; &ensp; &ensp; &ensp; &ensp; &ensp; &ensp; &ensp; used/total] 系统平均负载 负载(Load)): 运行队列(run-queue)的长度：L = 等待进程的数目 + 运行进程的数目 平均负载(load average) 在一段时间内CPU正在处理以及等待CPU处理的进程数之和的统计信息，也就是CPU使用队列的长度的统计信息 “最大负载=核心数”法则 在多核处理中，负载不应该高于处理器核心的总数量。source 上图中Load average之后的3个数字显示的是系统在1分钟，5分钟，15分钟之内的平均负载值。(注： uptime命令可以直接查看load average) 进程详细实时信息列表 每一列依次表示： PID 进程ID USER 进程的所有者 PRI 进程优先级。数字越小，优先级越高。 NI 进程的nice值（负值表示高优先级，正值表示低优先级） VIRT 进程使用的虚拟内存 RES 进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA S 进程状态 R (Running) &ensp; &ensp; 可执行状态（运行/就绪) D (uninterruptedly sleeping) &ensp; &ensp; 不可中断的睡眠状态.通常是在等待IO，比如磁盘IO，网络IO，其他外设IO (该状态不接收外来的任何信号，因此无法用kill杀掉D状态的进程) S (sleeping) &ensp; &ensp; 可中断的睡眠状态(因为等待某某事件的发生(比如等待socket连接、等待信号量),而被挂起) T (traced) &ensp; &ensp; 暂停状态或跟踪状态 (例如在gdb中对被跟踪的进程下一个断点，进程在断点处停下来的时候就处于task_traced状态) Z (zombied) &ensp; &ensp; 退出状态，进程成为僵尸进程(已经结束了的进程，但是没有从进程表中删除) CPU% 进程的CPU时间片利用率 MEM% 进程的物理内存利用率 TIME+ 进程使用的处理器时间总计 Command 启动该进程的完整命令行 最后一行是F1~F10的功能菜单和对应的字母快捷键。 Read MoreUnderstanding the Load Average on Linux and Other Unix-like SystemsUnderstanding Linux CPU Load - when should you be worried?Understanding and using htop to monitor system resourcesLinux Performance Tools]]></content>
      <categories>
        <category>Linux性能分析工具</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Linux性能分析</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[算法基础]]></title>
    <url>%2F2017%2F06%2F15%2F%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[function doDecrypt(pwd, onError) { console.log("in doDecrypt"); var txt = document.getElementById("enc_content").innerHTML; var plantext; try { var bytes = CryptoJS.AES.decrypt(txt, pwd); plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) {onError(err);} return; } document.getElementById("enc_content").innerHTML = plaintext; document.getElementById("enc_content").style.display = "block"; document.getElementById("enc_passwd").style.display = "none"; } U2FsdGVkX1/OXAqOrTaYemBONU5nO8AcbQYo2KZc2yExYA6VsR1v1CoaCA1PC3sklAXHYaWO/3a6Ei/rZ6kqyjSjdedntpcHKtc12kn39tegtgJfroP/St9j1t1HD7oF7GREN7TYSmcZMubUBn/QEybQnMmIY1+l8qOfU5lktbTO6MSLjNj4nymR4ll9FEJWZviIDeLtdM8dlimYKwmHI1Y0W6YK4TdTK1Js0hR+IELcJjjhD6W4X0/E4sEbbGrkvXJBc+1eBnGIBos4Cuxk7AvuSyIRYVaBepNsAUrFyIlg5FuvchPvV+iImnqmrVG99JzmN/yDDKR512IrT+IAWnVf6kZggwNr/17ICU+4azEk0i2cNsAUMi2DrdbI11orWaycW/OGwAhnxaGHIu8i2WTrzdyzbAaUBMP5wrm4I1cFfss3exH8sp0AR1Y4ZhGLCGY7p4BeL3YNdJSUA2Mi5eMSWEybmxxN5/OvxE0l4e5ui1jTjL21FTYq8U1z5e24ya/YaoLNVCYGARjgoGL67XsCaLVMy2c3IMdtf6/r3DTzV6076SGzRO8gZ0CfPtl2dPvHWaPhRbCQVeRjIU42P1ScfLfYiKSXqn6TTEQiMNmTZQGWygXS21l1G4FvG8ESqq+ymPrq9GGPiuOfGza5f6vY/0SP2vz/+pCv2SWEMP9P7o+9M7iwROHEaEOsIB52dyBxS71y1ikRNl6BEqMDWuDRZQ+jrdTwc7PrOtkY/Nh8OMfyRocKN+syj0N01D9eK08P5moN9Hap8ACcuk1ygIgWFt7qyEwa++ne6uCAuCE1k0/KNRLslJUFtVr2APimkXKye8jVJcvd5JCwtHG6wbtt/gqPe/qaAa+lvK0DTZBmRzW2A9PxmHHVrQW09e3IEEBWnf6JNVCDImSgeIyBkWHRQEPT8AfL7Jwvohr8qCKqxGn3G8M1q3sOgdW9hjAg0hrFnC5ZLKWW0o2A3EzYgm/Wn5iDC6ZmdAUccuOwBdE9qprE+1uqQ2q61xmqmtgnrp1i7rsgwUGO6RUxdladM6Vpn8dlzD7FBZwkYCbIPbictHhpi6c80/5bosG67UsOYi7Tv8vsNvT6/BVDL3zkKt9YeGb5jazZ4PRUsBQD9MirmoUAEggw4xCyY7dZabduZuWh6fTkvg7XHqEm2Io6kvHKovGbW7j+7BGsuBRtzbK9l0JmZZGmgN56YE+mcw3UkjlFnZMEbfZNf0CsqUWQs12L9A7bO2N4Yzb7ox5/fo/jTC8NLbHszhrRXEagl8KfMAimCZ2FIVrqo6boIWWIR5DtRWUvJ50kRbnOhlNN7WKtcrDjo66cO4+1N3BKqXPb41MXlXay3jItufP1VfAmfNicCxvbIeO6IrlpeIANmKMTTYO1swNhXBEWdc8lzhwE/cffmfFw/v3+HFa6wz0j046UapdpToTv0e5gkm8RoM78ssT+bRnwHZnx6WT/J/8m9ZPPpOsPu9c3BsHakixJaJ7CGVCidsHzWoEnjWdFkBE3MzsRDf7CEQ+Z6SZlVGSH82GzrkMebevhISnoWYFxTy/ZCH/nrS4KD+sMLJIdWQp8txOuOfNnfoepb1452FF1V4fpHraI5TlUSnQOzvy67FgkdohMbGjomu4a0nFgdwRlrW6gP63EY/t/sg7QcACftFR8UL2cCLbIXYOFg5g8+nYbrJXvTN6CqBl2B6idfmgZaADrSiCrOXa7YIkNEU8vWlCPSoYYNKGZ3xR3YbVOLhGlSCU/6fdz5FkjV9x6TgL10J8ttLSU1LBQ07OE0zdxQRDs4CMs93gmEEethlmEFLuWo9+jgJSqGYLJozlw8Y0rfij05TS2+hZHD3Fw+kvEGxD/YcxRGIpdZV7AdNhGd3ny7Y5hwPY+cy0qWWqMxrWOlZDer9SDBkpeP48UlbLqJf+minFF2xvw86KUJhzOKl2CsRr6Ku2mfZ8WGSLzeUckwMsBDx1bh0bmwb0T3FaZPWkLJBdCKXTTstN0lpOtHUCPDJAxwZaZetcVQo/8ICzfi+idinS/7hnqQ4P6NVya4omdC0VFwWEuaWb0E19t+mvrlHLCjcqAKZZnCgPKGRr93vQAJ1qNxiPNTGEuQxm/eWj0qWH+0c3G4/xpzpS6ThmS7sbYwp38xxNfD6HY1WRRPYGmtd7t0C0CoWSGXKhp/CEQpBqb9Osse8kEj9ZKeTPApteKKkBSejDSGBvcoSuZMIfzkLUtx1MDuFlpOmfs8qTveJ2EgaWoaRI/wujtzldlX3RSYId59CLgvGbyXtGVZ+y5Z1Cfe6HQgr3XES5gUid6SjikzC5YVpO5UyBdrMWEInX485g42pk+kijVQCQ3IsMtaqSlIp7ZBeh7xsZ2dnATCEi2LC+XwR3q+DOjlu73rSshVp/ttTuDZ9NQNv4vJAcQiO7OvhNEK7VzKDhk9tnEOsndC94jRm6nDnplTMUr9wIDziY+v9rPeaSNn359VSOvGbfZKe8ICdSA7azbtYtHpvHuM2xQ/OKoN7+uQ+AjF2nClYjJR5ETjhT7bb/0RGJqbtWH99DLOWQ+DeQDIOG1QUc90qFr/o48R8tbnIhG/2Ny8SkWbOeqaKqKqwVTvdVAUAc449B2jSa0vyhDNh9auUP/0oNEyvObIA/qJKkdZYKp0yrGQ9mlD7JgH7XHyU7HYXyjtZIwJ/x02tV1a46wH3+neFiIk/XWFHf2Kx54dNPexEjYqInI8lzedZyJFoXxDILqapuzzggYiSNyU7NAtrTHP+ihPL4eKe/GWIeHZKFUnltX7X//y+DYpl9U4DNwnoxnbmWE6mSquSMKjSSizB55vpgit/4aGFM24HyKjntOVNYvus74nsqPvevin47fYUO0d+uLJai5z8czugllB6CirjSg9aLdJnB/v61lXPy4kenYxghH9mUos/jpErQi8o2k7iyb/0+d4yTP0j77MUPZXeJySET5fduzyZpZfDqrotAlxLQjuq00yBoijnfh0IwSxA+dvpBNRLl0tAh6Rfn3qyYmMQ76YvSI+FY47ZxCwASx9JwcSwQU4cdj28WBm4Gcym1T5sfjQXTlIHFejpMxpZOdif8FbOA6pPHcR0jLxWvi3RSVXnLQmsbvDKXX7NWd6TXr849w9hFLdZbFQs5k/7nnQQANbvHMF+uPRT2yXxFprrvzSRk2C8jm5K9vAkNCCkFibL2ckr4wN9Cw0cfFVomaw+A5Lw63exDWbIHMJV3X2L+VGpWPu0jvrSXBVTeOl2zdj7ZEKT8vgRLiVFvfan5k8af67FF6cSN9jkxr/iaVEHLNngMTjce1PTBcsb0DV/i2zHLaQtcEuAuloJj9oMMM+BECrGdSzbdC7zUD5hq47jkGNc4R7OTFgPgwDv0rsZaaU1BeuJyHicXkwgKwiNEhYhyJrCaOVUr6NOF5YKkwFd0UuTLZAYhp28PZs3TGohgnVw3GrN/8rU5QTj923WlP9+ppuBLWMoTGyDBsNS90LZn2qr8uHHnTTkbhhpYGnzoUdo/zhYK3PO2TVrCa1j1ijbuARaBNzVlVD+TdLTtY6xCXWCZuN6gaJTKqyIUxWG771d4ZAvhnjCMZYYGIinCaLsmFLs0+s2wzYkOWR7HgMOeOwD/y/ecUWdhtxuOiIgrfn0fNoL6kFCaHfI6vuFHEkFmoT9Z8nSyucKztlA7/BZSdJLW6o6PFbqS4BaGPw/vuMF6FR7iIrM9J6wqQjOkNtg5z0DdOzlQHFLVbdxvqu9x2ijq3OcIs4NOfFlmVOOLkpgwNq5Fs+ttiJWRj2I1RyRth9Y7TpB5NjKNcTdWvA0LBoWmUREnpG5Mq8dsHutz4NlVon5E4h0UK0q3R8UDRyetOgoHuS2iddYJujlDTz6Zqg+0NXsNHcDn4CXgx9Qudpaxiiz/c7UFlSvAxCiYymAFjw/9vCg4sZvrEF/9PU6BEdwmXw+IHslqYWR0erO7emvofRiTVsN1gjzGUgIr3ZFnYGbKKbmumtX78j0lRNe5PlrPZqforoPlDC2oTJ6l5Ll7nSawixgddcgXD8W8AyiVA53uwpottD4mvjwOY0ERDAciz3isP7mm3Ae1uJGaaKm8LXaWb4To4qB/fE4QU76CYn10n+DImVx7sg19C+iuMSl5TtLhKd8viFkUr1mheWmgCsgoew4i4QjI/CswdY7i+elxYUqLvkbqwEFFbN74PnRWNBXv2L3Gw3bYf6hTJOZACGdKt5owcsDBm/0BMiS60ovn6R0iWmzwZ+lJwwvs/+kjVHcx8r0zu1MNjEKfzo8a6OwnQo/xr+Jq6hsgjh3mx2Brs0YTx1HMuWmjeXv+H9vP8x2Cxhrhv8C6HjsfVM4LnWxNXlhscHxXJRh0ytavNKYu4tqIgcKouyglIM3n93tEAWHuT7Y8cF2Vmt/kJqsBGn+cKVeINiyyI3hsOGoOvohs7nY/2YfNqNAt0Q1KADirnWMS3UwtiIyLEZ/dfCeabK0WoIieKt8WzQCgVHinpRLXgUSHoCEyJu+mRYpDz1njeeTIY1sMEPvXVCGTYOmgNvY91MsPmQFBZCIqXxIoZPqh496vM2XHfyDn8gpmPyV30AMy6OCz9dhVE51D3V/HyCL45PHaHGfwyUnG/Ytuamp9SbzH450jx/glZThrIQ4vvu9iAgX31qy9ofA39DAeDU8yKvVIIp78jzpNAT/gT4Z5YlH4gY69XY/QVHm5YFKbZhgje1V5mGVv5IzmJAIi4wfXb68XZZoLzqUkykzYocImN7kIuboBtn3DyKVkHGW82ZznjIqp5nyeB+TY9wUHGARwtHxrnBGbiEsDUSX1sPfv9YOU8ywWqoySXCwVn0No+dbWb13ywRPFITq8J4KU0mOKEoCE271asTzOFKWdokYHPgM2LfjXQEvA0LgkknAiPUX/n1kAyYd6KJaMQZpKGVvk6LkDxN5zmnez70d4XtZ4b5Xh76Ym+0HTOGx7ibobR7KdECBpf8KRP4YMZ4oBHFbMlMAhb39Nx2yl++ofSBtsv+wxEPbzxjNsR0TcbsAXYD22/+iVutcBfZQeOaKDXBQAm/K1piE97y5yOmcQC6WLMEsmhqI+9DH+Z7XmruBz0ZrB35g4bolPTcZPPvkcAAmDOiomiRWPOGeHve5ta5EJYM2hzGeOwv8L+VXgRmu8Ki8sQ8a8CvAWIAXT7GVg1+pzJXcXxK9FP1CsSwWYYBulldSgN5aH5bCXm9gpmbAZ/w4VO5siipGE8W5uU4afbMIfUTlKbeud3q40fkhN2SvwWBHCk1LYxwJafyqco3N3fLnV6pdbLgJgtm1EsWsY4AffjKVYwdxgEYtIWNTplVWg5YNtwO2pXPsC4UvHY2fHOAXusAe0fBaknlzUfXEGCyUwu+9cSFD9hww3iIALc9U/8+BeUMbKlytrnIrcYzfWHIpxcQh5V7J+SqbF2feYB0CH9e+0XrGID4T0UoJXP3DKzeb9muxV0+VDIzXgSEbgfIVIG5ZmOJNP/oAhH9E/ZuM55j9fPsGgrWgqIoCf561Dl2G31RZUa6RMFW0FmnbpOkK/wrhxGyJVO/EDZHvuQy0yjF6lgaQljlBLVAVeGNHISVD29zo37OT89C1ypSx5idA9sXeEL0xzHlcq3Tl+FysGzwDNVSXfqsYHKGl+/ybPe5ByJ0mYQoGnXtDC0+aGhN4op2wxQ3k2tbZkseIFLnY+GaJEAmL6yma2c9cN6aMfuoddXTyIn0vVG6k87T1xePQ43Fr3+jWPGgVOm/DcZS9ddMFHTdtrsWhX9OQuD6nCKZVngcPPRj+Oa5KAYcc6CyUG33BiJC2UmyBS+/htwldTgcmk3aqVknXSr5ZwAFr00I2ShRxd0V7NVQE82ZeFWs5c42jRF33kCnTwYy37dLAEHX3T55dCHLi/7HJJpAg8Sn7HhpcM7imaRJv31GK1QBHe2xPYEwxenenmVm447fC1RbDlO+vN7weSaXcc47JKaUycZPhZpqBNY0P8od3u9qM5x6nCkxYX3AeBzVUvT32W1kmTWKjS5ByVtOL25IKiFlvlXnYOSGdvPg7ZBG1jtaLiOBJ3+82OruMlh9GGCmhYsyLGOe2ClF3mibBokHhayTz3McDLSpWzl3Nvzu+CBfoY+CSr3JGEi4AOyomLuaq9fWCAoHZbSB8DXUvTgSYvI4Pv220R2dbjj4AkiMeKr7/etI+k59JP/gzHtBIPgxkbF5izjlMojsSrxcaCNxxRCjwaixO9Vqe1YGwt/xWAigzr7nCalDnzzbKTlvjKAVdbq3GD8vYLO5f2EnfvCTUVfaqgaRAdIiKo7sX0YafC5j/rorJpJd72b+CV5ppfLKkTGCdyMsQRrNj29QXrLgzL9YxQMjTj57Faab4hPpsQE8IKroe6i5K6Kh+8Ly3vXyZhxXpU08lonf32xaO2asPhoerMZVwIyMbkm2Q8TIaoHPFrBcNvi+0haYDF8B0cEk4l/x5WzQtNsw4QfotLuBEvCHg0PS7QJorarYvN+wfLZWr7WmVN+z6/rZj4wN6vPH1Z7XjHKH9eWxme/V/NTGF2ajhtrhmoRkxA+9B/J3xlKPSXvmPghwID45iepoy0w5Ocj/pQkhbDfjkZy69IQx19xXwp+EEvggq3UhEnCOkGGuIbi2AwQzlY4JvZ1Nqn8K6zjGWOobdKdpmYDXrmwojtk2wcpC2lVwMvUcFfUzJGXZZfQBYNG/PtKRnNyliJZBELOVPOgwgQzbu4qe6PZVGvm4Lv6MvAL4iBoZWyOTcPqfRjNcZq7yGhBT36tp/Pi0rM2HLuwx6shzKLyFhPmvNMZGnI3wvy9uGvkHIFKt1ubSU1MPvgapdyHq/MRBUhNbrBtJ+y1YrznCV3FiDw1sYF5tU/c6wVfbF5x0qGTUn9Tl4h6bauTcCXPTjKe2o1EL6hKMEpExjurVZiySPW6Az7J8B7Xn9tDm/oT1FQK0jKJo77L6fhmvPEJmDo3JcQfQxwmCHsUGSJI9k0k7lywdSS/BGq0wKJib8cIPJFRukE/kszYewrCm8CE6HgtcvnJ40+0EWZ6MKNWU4MKo3TWsTzhK4xGrCSqqkz50mEo7MOidfZ5PL8ioRz5NWla4fDQPo+rhUprrObrsXy8n3t/ut4IYIxyhfE9gxa6SXkRYhjqgiQjNhFiD5zYNSDPaizwww26rIupaK/fJG2E+VPypqERyBDllB/CsPMUnpdslk29E9+xgMXIvw4lkpOqQtMd+5refxIrKJNs+v5wZvPiQlzDOzpIradVE6Lm152UVXdN7mwUvNzf+l3ZZ+iu6Y+Kdj7NEnbRfO2GTt2YOl8Kr6Bw8rrF2ndaXbzTQlz7lA55Au7fE3U51uDWPGbKiNc0eLwAUq7GjQR7yep6r7k7QbiUU7nQ6BRBoFAT8AoWS8z63AKQCPj52g5MclLyGqbgSyiqqsXnbRCea6KUQoOOd0oJs1dOvaYbSTaLq0UzX8oCFPHTK/27Nslx/ABh+kyqB6qvZT0kuXmVMT/BN60lPbYOZE2uf15SJaaBbMDJi1p9avdNHpEYMfxxS3u5EjxloFYFuR9Ixc401TzLBmb22LYH3I016ShhkaGJkPvL5rwS3+1Qy23BqzoismlN+DcEPDWRPTtr27zGZ5cXlTAi3cUzAZlkRqb5AtEfxwHmEVxSm0QNE5NoOcW5YF8yHPurR7Fkqm7ZkxM/mUpP4K4oT/wvYr0I2jvcwKtjiC70L8gZWz7ifzfxvmOTXelCfz8+Q5HzPu4KQLjWkpClOOV2bDn0YfxBzoojZDWrKHVj9R224KopiA7gPb/K8uLYZxYtvBbPekGiwxQyEZTL2AObwcVm71dttF5ZhVctJmLqi0mC12G0IbbdkZcipqijdM7TtwzM5TVOiycpavwEvfKTb/D5U1KsNTUs6Zp1k24dsK6/5+gjhGydaH+L2L4Wao+O30NjX935t2Ygw/8LcZtYdkHcY1hWb6M9AIVy9DDBTOYaZ6SxaE1mkCKvxKzJZMrhq/9oBQfcQRythkfqDixS3uJTTWReQBB21F1L0OFDcvDrT9ETVY2cHp51ZHxyUPFCm0t3Ofj2oZJ57B5l9CAW94ZVR+GMz1O5onGyUAUj6a/17+a2nZoKudNhDMOG3byA353MHlNnf1FRo2xFOSQsXU7faUYcA7jNmcBNWFC5s7/qpJ6YkWM4XNYbHAIwSz7MekmuxSsmEPHsAZP5ODfHH1VzmyF/5WQzka0wFkHN9JoIA/48Z1G7ZztKTnMV1YmJRVkoums6fMHrXZnXtmfJ3W5A7qRJT93PVD1+LW2FonQ6pwQ1gd+45PN88BGeXK0O9QQXuQ9/XVbrf34BOtsHisw17zVK91xaxsfCznxtTPfC9fTrJrlB9dX45Nj7D4XQW5WTQeydXIuny471lKrWpZpW9Fro3UfpJVGzzhPNKVSllDY3ugzz6FlwP/WZp67BL5HOCG+YsZ5fjy2VZp96J+AemqRas0RgI1nmQC7zOH/cF8I05qgpH9EptH4bdTYSLG4qM2Lvpwlwh8On1unhVE7eWtA7JheMkLEhHA3QfEZfgQN9hKX/PlPNN3ELx8aceXS1j4OC7fOpiKtw8CiTJCMB3zydPgQ05FqrEnVtJQNYsTbphT75CFNM33F6fbOmcEq/PLlTNjyMY6LiiTvWe2La9U1+YUPsty0ar8W95jRiR4EvMl76X3Jwo0eU6cq9KxVu6ufuz1/y9aAuHVh9MLUXlDdElHBVWq858RdzpSTPq0Q56eTiITCrvX51W+qfXRUI07G1G4vPh9BPcyC6ZKszZhYkL5njQL8gT0DbnMrQjUmfUFmrL4+YuEp5+p/f45eo2OiXGv8SAl2SxpLMyB262XfRF8m3ZMZmEnv6QSyLx/5mcRBN9lFyNhIXD2QMVYPSlQtjlR+bCvresjwu08TjFyP/hRT5np+Q+fVOoRQQZn9S9bCE5aGCQtMLI65EqMq3U0FUl2nAhlfcmrclOL6tjr4U0Q9I61Po3L+wMB/GcR2NhoJFsxMu/VNG7ypKp1FoboJfw8cdnq5v7KY1Gh3AzSzl+NJXMkFy+58mquf3nty3yX+WYXre93wYFwmuimIyWWVeWUj0Wp2T8sN7vSqrLeG7kYpIESrirhswhz5wodRUQoobifagQXGbbphrxauMmKISh2UsbeznO+jbawmwCcoejKZLEJCADb7ZQfRlx7xXQNrn6UD9zjqOh/hqLmiXfkaW8hd+6R+zAk3Tjip/qdf44/Qjb2EcJluYF8BtTFDGX7GSiWkYSi5REUBKdnw+LuPpkGepsIsBgaHzdxz9xzphMRINSfP6F6r7xcLLe/adSdiuFMLeDClguGZie+xBQFV37gnT0hz9dPixQPPAbFEhtTdO6C4RXTNu24PyrSjtdYd1ORaJ2e2PZkkhJq5HoyJ/uDDKgItCILD5VifrRmbK8t7vtNhEvRuYzr7kGi9+pR+yKlTX04euwMluWE27SrYixjvL7zo8ZlwskyHCQopTG/NaRcEAvwAgmNemwQDnmD6ZO4TDNU7heoc7pEz8wQkjw3Gezt2R67CZIvHkV+rfoBwUI8Ivp1URjZdmhtAMBHNbxbDkV7B6L8k7AIybZSuYWT/pjrwOd4Kmluo34nNaMi88fh5rYgkeewUiFnGgpZf0L2L6+uXGlL77u1WhNlzb996428OGblS0BRiEHVzMsMuWRvBuOXGOaNf3UdSgzi1vv2ETYvHu46pKuuVyVYqipx4tA5+zzDEURngLQUALZ2af1rnve/hDwq/Kyn3nqh/0RiaX4U2dE1d4lSa3nlKSNk+jexaxRUPrVPHnOsml2JOJQDBHScLHqpWLuXr3yb6QAjDdBpiqUwCDvDWWioyrdhhEofQrWMpowvGPazOVhGoofmC9k5BaHu1h+O8p8eg0EEcXTV6AzOGzEwF3HdVG5jur1O1EhXW0gnIfn5VUHiIfgWXHXUK25ah9+3nnL52MdvsUi88gPSdekMN37itEYj9iv6ErumXFaw4Hbxq+AoAfH/xpUTuq4MmY6S236FUfW9R5Upqku9eTnZR+B9j7YS5o9283vot6rXog12yVtVIV/DY5YkD6ooxi7Z8D76qANR1mM0CZJZsDXCRIopbjy796itSg1DJP1ybPa92wYRYEGlI5zd0gfu+w5eHwOUOte0JnHs71/5FtKjuhPe7W0EzNs1HL/+W09u76pLbFQ5O1TGv9shWzE8pSXbTjyegO5W7w79mUWAFu+zg1918AeOqwIOIEZJ5cFNJxDhKJxRzeMU/mrbagjGrOH6yQrEr0AdcbA22l80sQexWmYZEzpnp4ZmZLp/y+0t9Rd1Bh8RASqUBKg4N+70vJBMR6ul2zp/GqFuKULZTGj8L4hJ2kvmhbMPMqTm1VPQQNsatMkS1mHDMf5QW6cSHoroQ5XiwGjYXIDgLFSicDQCQ06S+K5y2Bd6Zbi7B/iFcw9pIyH/B6pwTiwb0A/sZalf33X3BV31wF2dnDU3u7gC2pS6DyVMxuU+n+XGPR0/5gKqYsPm4dVYo1cfvnXIKMM60z9OADFR97ohj3qZQgU4S1X2hVTJWvBSef35TJ0J653nr0eZ4I0dEHnPQwIMDLvhXZuxkNJ4RgjCsXdXIbAANBmWSeyaHgoEV4+1+AjNGGMDuV3oZSsb75hBC2fHpK6w8OyUKkZDkTh+uhILMX9y/ugwhyYVDUxMTX7A3xd1DCdzeP3zjgO7o+ZaylMeBV8rt7iNPkh5F0KtC0jlSo81aybJSBW4oeleilBVMliZrZn+q6dGRuWyMFUsNonpzrKBgV1obEcA2YldDRlqICgjIbwZReEJotrddU/19m7dpjyU2BvU20n9uoxhysK84CRIzUZ27pPCec7ot5Ms9KNTgOjNdhlRJUIZMKIoJ8GDwuiIRCDElYqmne1696rnJmeHmgsXFt/xRKqJVcLxa9sMPdLG4RXAsiC5OBz2IXcwqVq/8HNb3FrOuISKV0C3h1baGuoOlx122EqqtgFSaocuW+cNXeKzUKUmtjcYGFl8KxkneS5ypRBxKYeP279vZAFGyfA4kkxvTydShPYg4Oe+fHsTmkyZaB8Y0sj0tlt6vyEnnMldTKEy44elFYRtRT3Q3F0aEKxG1zfHDWad/WPKe20RCPdwYT31Ngox7Zhum2apZYgCm8ykU67a3t9SREE5QxlD634ju+XGS6dwAFnUnIaU/LZLFInVrhMgM6bnTIay6DnzXUwyrPEn1x81hdxRSTxhDC9zk9l9RmqpALCGVn7ogvC0LwQn88VysqsUvYqGP+OCRADJdCY+ALHygHU9B/dKtLA7VvXto9+a5tZBR2oFyYu8wjuz37sf9LEjORrC5pAjTGbF6Erabj5HKuSQ5p+PkC4T/hlhjJMOOAN5FNram3i47i6d8aPxHXvSAW7JD/c+zAgp9gtaUJY5j3yB4M5CEZoLGcc3GmN6P1SGleaMyJZqy00+/RdWXYkiT3ux9By8eCYsQgxhbrxIA4XbM2WPnYGRqFV1SXYIh0DBCVN9mqVbExSxFWGbyDid2xJPJqjIgR1tg7lvpNhyjudtUoUNLo1t1PhJVU4s+LyZif1ykiBFvMpUTG16xsKBoBKTuFo1+a+U9T99bUa4sUkh+ZhxDMYBe2Mf7JyFSovX99OS+C+HUUL4qDxXpMlrQjnSVcxyCepjlA05lvShbd33h2I0TPZxN1q/zXA7Tx3f+S2sjKCdcECsqbd8Afz1aY+kZIoj0DdD1PtWLMMzcqAF9hZOUNtZJH3rAxHIHOc7Z/QQTOKwSYbwFJTfAYOdajzUEYwBSuOSWIX1wXqn/EieSXCr94DxetWy/kQ0cHHcjOn+IDGr8pLjLVivKUaXQVQ0T2DqhBcN0GmYwd4A62HDoDP1yaBPdFAoG54yAhuXKfx5nRBCE+V7CQLhR6Zr0pGd/PH5/AmqXMCNTjFLZBNZh844x93F42FLQXlWMWi8YU6M04cF5pCq2kIZLqwPhJHzmzr+sYjSnVMqZUOROXhOd7c5AYsDFdwAz58ZY169JYdPpbVAiEiyUZNdROsYiqoJ1rbJ52diZAKAeKxVKzAMIquAzBtnVPKyMQfFmOzCzOp61TW93LT8Ay5nyFJVuki6VNvUzuwJpNdubC99llndskUo89slPS4ogRrOv/Z0DtkEHLLtB/17ORgCyefiDTcLmNvFOZ2WjGWKXPjsjVbYFPAkro7hGZwbu+dRJfKy+NZFbTu2PLsLekwcwQMdv0wRdeDLFDZU1jfUPNuXOJYHwMm3FMqn5gWXq2ksqwjtBa6mPvR89ayMxAW2uA0RutVOahV2kYXhrc/TVH+hftrD3eUTZCCTl8kO/rAUjeEv2ZsBicHQ4UKcRfCWnCwnRIaQ52ra/0RIpq+IgvA/nxIEenU14fgbGCJlaItceA9sjNcjt2I490bCZKECzCjZPvdOspecv+xk98oZYX9nJ9KEjTWTAY9QwAHrcNRk+5IglwVOS5puXCWIK42dLGnwKNqJXWYmdn6xlinASv4ZJ5iEVU+l39GSkPt+HwckH8ZpLogoK0RhSPrBKXoQVNdaciA8vo5mZtmsAzz0I/dZTAXH01Psfv9aadXMlbbUsOW3YyS76v4aodkZklBNHO0/YlVUBC/73Q0s8eVc5F9bhgJaSpzpi0v6RMLzP3GNgvfRQWLgKB68EbXDkSN8aJntFS7kA0mt9Q847e1GvL5+h7pmMHF06hxeHzWWxjvnW7r0l+Vz+KU2FKlaEiSK/DnTzjs+9dZqnDyj+lWLYeW4uZ5Jhxpe/L4mAAJimGxYXJtNhsoB8exmuB4d0VHNG8ytnehkIK7rEV7CZSnYRZyuHPyZ7K2kAcZ3QuDrIcujig8chYNcmPqErXXyR4VaeonRLD+3NJK9s9a2cqFCrinKfzxNDI7sQIxDtoymC05cDEKMIva2pSczCpvigROTRYvmZ/ZKfSzQRTQ8cRbckfUknhStodAgQkhGA8YAw+g1MZztpCaj5E/rhg7Hj41zxu1/ZleZzwvUnTvoEw8RAS9z1V3n3Ss6ISH8Es+mkRnvBz6qgUqWLTC4M7ujcNiWuUVbMed741WmdD5Jl4nyZhPGIyrR6XleAIz1fSggPJkUfvncerPBqA4ecdd3eX1qyTMQzHNsMbiwb0ZrUQLVlxDnX6e5c2RwNnCAKAmiqToKev68LV8t/pY9LEpwFYs6NdNZ/KfnkOO6WzbSm57M/5/ohOabp/SolqJGqdIiL0w9D76ZTzCjNF5BCoKS1y531TYZx9kHpRrbmjhtRfYeKqONEYJh4BilrfKxe4MkmTJjwhh+YEi36WPINqsjMPkHuSJ0bA9jWNeZm5ulwiO2P188KYmchTgK+BdOA3KQ8lf3xQLz+TgNPQ5nzdPxBAgjnKlbLbiyosXl3JsDbTUGEGn11y4l47GQ6MX0WZ/cZS45yHjZ2iU1AY8RLK31Lp/u0F6Ya5v6Y9oB3og1bZbYieuCtA15Lr3Fy5EQHH1BcwW//MYyiIvUM3I0UqFsOzLPziyAHIvi4EimmkMpCp3dUXag1McG8ZtSdF4VtldbQmmBBCxPZLNeaRAC3SgjJ+yWBiKE1bShYOTHnk+1VOyRFjkrQG+ivwHHyqUsK6721ZFdCZ6fWbRtpovzDcij+VrjmwkTA/Xc29OFRpEoLtUSjFEpz12q2qqEpMFehi9fH8B0Pwf62LFukf5FcTE/dMUwCJsHTDYTuYMt0TKMLyVw7vOCjoHQDLTaJZxJ/CPl/XEh/bSC06+2dpmkNe8CYSu1APG1L/RbodrhDpkqq7wKLXv9cVHJcAp9ldjzt+UKeIZ1+6CqtfsbtNkegkCinYoI7w5pyT5VST8M08eWd8qR+gAW+IENo0HiZYgzBxHy7IoSWeUqcsA3a4GgFT/lA6UyoAZznBtTfHSI7vWuG7wWlz0NidTnGAShb+Ihcs3NAFlSJrC+jBIIzV2u84e2VJ6tNDhOMU1B0FGPZST4qPHF+92Y0dpc6bk95axJZYJwCnR0ykiqvl/wmbi6qcueQXwukbKx8mmy/MM4b33/TY5tGcQhsxAw8lm0wtnugnJ9e1DM72ocUqy0T3MPdUH2md10JrbnCSBs3LjpX/KDta8ETWBwBAgZJ8NU7r3nkKbzxQ8N5wp6O5x5BMyZYwBBMYPeYkb9tuC5ql9NEqannz+9XEF/koV5CIDT3uQmXDniVbYGwqZ66Y5P3RgQ/leGE17qquqzgqaS4nxlgwmegMEQuN+rjTDTU7Gsmj740Qqkz47XM89maclBvlnvFh6jwFt1qXK0goCXuggcXsxBv5qkZgE/G0JydXaE4UndjMhAkAL/JTGaF+ZS6XqU/8EAc9HwxR4YUY7Au4xHm5pLAxIkjzd/k0gBdjQx6peSA4sdpO9697lVEO9BHXXmLRlMdr4jQB8NVoDg5i2SO/70FTjQgCiAjm6yJnTHT5B5kGxWBxhGqihFe2ZsSQSYohCU44Lz+buMg/+1CMvUezpTbT0cqBgMGt1vJS/tVC3v1GqpcQFGNNANaZU56NJMx/wwQF53tFMOyzky1lkvRw9EKPenBXzAXEaBZanmHc5ETF0V0aYpvnwqkhsblIotLapKRMxs6Ib2Z98hjK1K+pQz675XbW+GQQ2gNIfciVre2btw71znn69ZTMTlXXKxV3+VBWU2Rf/qZi9iPWZfT0Q7tKiJAFxaxkUbmUGjdG7y9Tt2VjA5yhpMH2rptq4pkyB0U0rWEfWX4seoIVoD1zFDA2ypnCGxjj3Zu9eL/GWcXXL7sIHWmYuAK28X7r/BlsBQKJ1bWmIGj6IVDaPfuQ+eemcjpzDTSxn4Ir5IRiRW+pvhjrBWofwLq18oiwLN69rj8v7mAGWh6Yu533aDgCVU4sUgOdbVwRNaLE8FwgLR8FHpnFvwCmPz1fcGefuXbKX7yIJuo9dabdjTgzvrtpCoCvOMtNdMycCrf3bzGJ5siyBhkTSukOS6fjGg775rMHIYyTnLOBwuuLxCFl2rjtEGTI2d+wD7uUrhC6+9GEHiForwgSv/06KurnEkRL4qjS74RGkXbpdpZtpfr8FAsV9ZrxeB5ZIikPjDgsKtxg9yr9N2nDVuI2xJrbnAv756CVIX53Y/aw1mEgh04UaiyKIHJG9L5R8mRueGXBcMrefcGu4Au/FwWrsLu6120KRg/wzp4kvwxP4WNcM7GOsp0/rDC1lTCXYG/kZIx5EeMatJZsat8F1oZDaVjfHccbxPJ4JgASzYYrOv4R/7wbJ3YctMAgDos0KWoXz54tslkVAHRAi6bEfpQJqJpl7myZs+wraen7BLllFM+p3Iy7NFxH+5P4cFFDB07lOqsU51XIjdedq0p8kUEq9Ob2QT+MDDg9F0F9KH0VVI8W2D8+2R+9pzKfrc/Ip+zTmnI8LyFr3wFsONeve1LDB/hUCJ8E7Lkqpk6LUSfzrgoiQcUfhWOwMelJtzVOmo9xUoCTvm84cRpsmm3nuzZnaaYfVyiJEH2qBibWQW3404ZKy8pEo4DLizN7Yr6kcffgNkgqGhYb9uaV2xSjLeJPUSXOuS2k3D5MImYBAgqKl+sSw1BvasJPzFN8B2kMu4UISht/eqmYYyNPs/DAQAyNHoHKD6m0FSs3zVtcOj87dkKcEn7r0fIoOFThitJ5LXUvzrQLHa5ZibQRccbLpepmVY4M6JFYeQhcIxqfQmxiFw0TLV4ln24zrfv7GgH0FgO4g9pgtGuevQXl52tdZBR+9G0sohYCxoI+8keSXRLehvmuX5hPIIA0b02lipR04MPAL7dFbGYqkRScIw+QgJMK4V9iuzzTCJ2ml8BEMTD0A+YpJsslbfJ6Mq+RhY6gfAtAFn3N9J4NWYO9cfTycrsSY44PHRo6W18R8sTljjB8DO19hhoJoW2HTKyPjZis0uP/InZwzgUBHr7HSwvfhun/Q/OnIVYyIAz6hlS4nqMXcJooXuG5P1tZCbg82QvI1aqF5xdYUA1yljFCrW6iTRuhAx/EGBFIlQU2PqnDxCVuc+6+T1CCxkwzaP/uusFQUSTtBPrtWaw5sKlzioLlzN0HT0PwqFuJJfUSkPZV0l8UQcTC5tjAWjN8uyVBkMRF4OCN/EuRvSxUz2edfBa+oWvhYFM7rm5oHNEucqJYZqkfKFk2IpzGAG3PD7Me/IDMW4k2jE+FsOv/FSCGKeVVxIhpQgxs+q2L1EMFQ4zc51Qg5Vl92RR9O9gNlo5Cbjx17nHjDd0tsWNQ16ROnh75KxFqlCh0dDCNQ/5u4eMOtCFF4c8GTvCMvOkGM1K14i+CkhHNRBGMnoE+GhZRGdjLm1lv96uVRi2CfghE9/cBzOWGJAfhFvD8/d1jIR8MdWOSRp/l0/wvzU9AzoLHoVaTJuEUXY/dmImatnrhYoEzsEpD2Jqm2vL2kr2IAqMmlMXYbhl3bWqFlsy6+zWM7rYXfJ8EfL6UvR2UmQsrnhrIxswj8WPMbMSbpeBs8Ifcp8Kcl9I2VL5s8Kw6nc2cjdE6gyZtwt4KYywlCYwPgfjaJ8B9i1KRDwWH5F8Dtfmb1bP6uh8KSAATnG+58RpGLsIRH7zcZB/8ZIZvfcn7JN5CnaRTh9HVhTrY5xS1rujnhIfhbNz7lZTEtr+Tv1L6YpQBPPvB7naQHr/6UoGtKXQOTGdgstSs/+mLHaXL+b1HB9TqJ+Sf9FdyGrdFTT6PMAdW0UhLbtu80RQaXtJPi1X84/UVD8EYI2eCUfklFNu/jpx6ehSf+hmUaQpzXCRqxiyWd9hMKg0iJdS5SLA8ktFsNo0HTekP6e5HoFGys83LN2Xh5bGqLmW0N/i/UBBQxDonImiGhMuNuI8fB2C1wM7D8QiMZuJIGgmOrT+Jh+oOIwid6aIDVxkl9i4B8y9/+ofrAegQ41pD/Kjv713xZcB7Mi8sI8RDUjMhIBvEiDh6iF4Q67khSvL/X5iuRDtPePTNmMzJiHXVCgIe8gXcTHWYn3sKPXJJ6BnbE/9RfsTNj+4J2dUZtXUbJk9WeiED4WKPFqN5r5XHJFGkV4SehyoO1iiB6UchdH+tJGQIUlwBboPNIuu/lRppbWQt5lCZLrihhkaMMRXgLNQVaBBxLBTd1Y27wS4bdf0lqDjoV3yVPaSQScgyQ1CMasngqZjtZ7lIjefxwA5s39gfTKaBHZoJQ7m9prCXFMJ3pAyLoh1SjBCQgQvE4B6DTV3nGP3A1YVpF5O2qZeJeJVPHRuq7pDHQlr5pVC4e5Uv/UQ0N0pJvrON+ZKsnaDiIy8gOaTugdDqHWMM3BtnX+moQUhPT2a4oOBBDlivMTXOu2t/b/JUzqFAZy0qP58a4hEn08twU5yLpAGHw+snC/Pcb5Q3I8l9O+vS/+5mfkEaiz0PjoqtNQlCvAdo/TVjG/XsS9ZaI8+qUS8d46NFfIBBHEyK1GPS0Kkwt4XKkZP9mtLW6D1ypRwzCJGwUwkzQZxlJilXcXSUwbhRoQux3KceXhZQwWhvC93NMYHeMrHHMZn4QIOXK7YMJJ5U9eQsBV2H8or9h8aFZtJvh3rBZDSMLY+l5oPqg81OPEgMmfcBmiwi2zU097r0u4qR1H1UMhDBgjytvxv5Gh4aqsdC7e5L01gfvbvqjoBJNlWJ0YPzkvhI4XFCEN/NQ4oNFqn4rTeTGJzxaMK8xA/qCTTUSwKxbSus+uRRF1Z3Cq929QWWvq9vAc65pGgzRGiQ9Lhf4dIz9TTNMPClOvkCFdy1b60Ntu0TZY5LaafbyxQcU98qOzTtWW4r0i+xcWrT1sGzVZIShmm4Bmr/mjnKFAaNfO4msCI/q4OoZ6YeUc+qjXpigT+0qgVb2U8sNwqgP0U5IHudUcME+j3HFMGJiZcfhEMSel1Wi+phPUzxRQ4FG6TxUa7V5XkTDmntW0GRe+EZOzHoEZzzzG4aP/1es1HSXC/v+pkRr4niGrpEFsS7CDpfabo7195tb52wpcVCHwikuwvPTjsu2/iWgOSDzojjU39PO4FfhD/flmKfdRa3NTsJ7jrN5F8IQZthE+aWO4mW5dDaJTmSp5OLHE42HjVqxY8aH7+QpyP8Z0SRuQQLXyHDUWtMk7TVf1E/OUNXRloBBph5P3CS5ghRFF6k5vmNXCd3QdZYJKJYBg3gljC+7GfXGQ1mTuWaAgSxyHnxiUo7zZga/5PX/Ul8tvanpzVOcps8Pu2jVcvp70+2W4WihD3fvFahxTU1xkBJt7nJrk6CYF6MJMAmHeIKhPbWqYgO3BZioSMQmcedw6I7ubxcbE9cbaUPXBk1faVVhG1vOb2Ac3QIsjgc3V1vB6hj5GsRNuDCV3C5B/FftnzoPTQVqgnnGqZNJ08+vHiE8hw8OC8IMd8Ns2HoHH5wRJa78fJEEZgyZZwzrJTbzOHBbWldWbHHogBErsVKWrK9mF3MxDP/KhwRJKas+gpzHorqvSHVntozD+Ip8lIApbVFG/DHqNyn+3aL0MI1x5rAYrkEI/iHNmq8r7JyqCyK7f2ZN91QxhvX0NH4fASVYq0JmAUTyDSPCyRLUop8d4yUt1k2kZ7EOSE9CiIXMNAhWuOMvPr2XqmQkFQe5LOBWfkFQv0oftNCCTrnXdm3Pf6kFLC7nJt1ZK6WkBK6SWc4pk/tUSYO var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【闲情】记 第二届南大上海校友会新年羽毛球嘉年华]]></title>
    <url>%2F2017%2F01%2F07%2F%E9%97%B2%E6%83%85-%E8%AE%B0%E7%AC%AC%E4%BA%8C%E5%B1%8A%E5%8D%97%E5%A4%A7%E4%B8%8A%E6%B5%B7%E6%A0%A1%E5%8F%8B%E4%BC%9A%E6%96%B0%E5%B9%B4%E7%BE%BD%E6%AF%9B%E7%90%83%E5%98%89%E5%B9%B4%E5%8D%8E%2F</url>
    <content type="text"><![CDATA[Abstract 时间： 2017年1月7日 地点：上海财大（武川路校区）羽毛球馆（旧馆） 事件：第二届南大上海校友会新年羽毛球嘉年华活动 角色：第二次参加这个活动，本次担任 杨浦队 队长 ^_^ 赛制：趣味赛 + 团体赛 赛果：杨浦队在8支参赛队中勇夺 第4名 (历史最好成绩)！ 趣味赛: 单手颠球，穿越障碍 三人隔网，你发我接（限时） 团体赛(8支) 徐汇、闵松、沿江、张江、花木、杨浦、长静黄联队、市北联队 赛后聚餐地点：上海财大豪生酒店 赛前宣传海报(感谢@陈雨致 学姐的精心设计)： 赛前集体合影(每队一列，列首为该队队长): 高质量的比赛场馆(感谢@王绍立学长大力帮助联系和提供场地！): 比赛中： 赛果: 冠军：闵松队(根据约定，本次比赛冠军将负责主办明年的第三届比赛^_-) 亚军：沿江队 季军：张江队 殿军：杨浦队 赛后各队队长、裁判、志愿者们合影: 大杨浦队赛后合影留念 赛后聚餐: 广告时间感谢炜觉资本对本次活动的大力赞助！ 明年再来，闵松主办！]]></content>
      <categories>
        <category>闲情</category>
      </categories>
      <tags>
        <tag>闲情</tag>
        <tag>羽毛球</tag>
        <tag>相册</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CaffeNet vs CaffeOnSpark]]></title>
    <url>%2F2016%2F05%2F12%2FCaffeNet-vs-CaffeOnSpark%2F</url>
    <content type="text"><![CDATA[SparkNetSparkNet 是由amplab开发的基于Spark的分布式深度神经网络架构，2015年11月份在github上开源. 该系统开发的动机在于当下流行的批处理计算框架（MapReduce、Spark等）都不是设计用来支持已有的分布式深度学习系统下的异步的、通行密集型的任务。SparkNet将已有的数据处理框架（Spark)和流行的、高效的深度学习框架Caffe整合到一起，同时提供了Spark RDDs和Caffe的访问接口；并通过改进的并行化SGD算法来降低节点间的通信开销[1]. SparkNet的架构示例如图1所示[1]。 图1是由5个节点组成的EC2集群。其中Master节点负责向其余4各worker节点分发任务；每个worker在本地单独使用基于GPU的caffe来进行训练；本地训练结束后各个worker将参数回传给Master;Master收集各个worker的参数后做全局的处理（例如average）再broadcast给各个worker以进行下一轮的迭代。 CaffeOnSparkCaffeOnSpark 由Yahoo开发，并于今年2月份开源在github上。该系统旨在将深度学习步骤(训练、测试等)无缝地嵌入到Spark应用中，使得直接在存储数据的(强化的)Hadoop集群上进行深度学习成为可能，从而避免了数据在Hadoop集群和深度学习集群之间不必要的传输. 作为Spark的深度学习包，CaffeOnSpark填补了Spark MLlib在DL能力上的不足[3]。可以这样说，CaffeOnSpark集合了Caffe和Spark两者之长，并应用到大规模深度学习上，使得我们能像操作其他Spark应用一样操作深度学习任务。 CaffeOnSpark的系统架构图如图2[6] 所示： &ensp;&ensp; &ensp; &ensp; &ensp; &ensp; &ensp;&ensp; &ensp; &ensp; &ensp; &ensp; &ensp;图2. CaffeOnSpark System Architecture 从图2中我们看到CaffeOnSpark在参数的同步/管理操作上和SparkNet是完全不同的：CaffeOnSpark executors之间通过MPI_ALLREDUCE接口通信（通过底层RDMA/Infiniband 或者TCP/Ethenet来保证GPU间高速的数据传输,10x于CPU).在这种通信模式下，各个节点/Caffe引擎之间是peer-to-peer的模式；而SparkNet的设计中依然保留了Spark的主/从模式。 小结CaffeOnSpark和SparkNet的相同之处在于两者都使得Spark集群下基于Caffe的深度学习成为可能。 而两者最显著的不同在于两者在系统框架设计中对于参数同步所采用的不同方案。 参考资料[1]. Moritz,Philipp, et al. “SparkNet: Training Deep Networks in Spark.” arXiv preprint arXiv:1511.06051 (2015).[2]. Large Scale Distributed Deep Learning on Hadoop Clusters, PPT[3]. GitHub - amplab/SparkNet, https://github.com/amplab/SparkNet[4]. GitHub - yahoo/CaffeOnSpark, https://github.com/yahoo/CaffeOnSpark[5]. CaffeOnSpark Google Group, https://groups.google.com/forum/#!forum/sparknet-users[6]. Large Scale Distributed Deep Learning on Hadoop Clusters]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>深度学习框架</tag>
      </tags>
  </entry>
</search>